package digen

import (
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

func generateMain(outDir string, body string) error {
	fset := token.NewFileSet()
	file, err := parser.ParseFile(fset, "p", body, parser.ParseComments)
	if err != nil {
		return err
	}
	pkg := filepath.Base(outDir)
	file.Name = &ast.Ident{
		NamePos: 0,
		Name:    pkg,
	}
	outPath := filepath.Join(outDir, "di.go")
	if err := os.MkdirAll(filepath.Dir(outPath), os.ModePerm); err != nil {
		return err
	}
	out, err := os.Create(outPath)
	if err != nil {
		return err
	}
	if _, err = fmt.Fprint(out, "// This file is generated by digen. DO NOT EDIT.\n"); err != nil {
		return err
	}
	return format.Node(out, fset, file)
}

func generateExt(
	outDir string,
	manifest *Manifest,
) error {
	pkg := filepath.Base(outDir)
	fileTmpl, err := template.New("file").Parse(file)
	if err != nil {
		return err
	}
	attrTmpl, err := template.New("attr").Parse(attr)
	if err != nil {
		return err
	}
	var values []map[string]string
	out, _ := os.Create(filepath.Join(outDir, "di_ext.go"))

	for _, kv := range manifest.Fields {
		k := kv[0]
		v := kv[1]
		data := map[string]string{
			"Field": k,
			"Type":  v,
		}
		values = append(values, data)
	}
	var imports strings.Builder
	for _, v := range manifest.Imports {
		imports.WriteString(fmt.Sprintf("  %s\n", v))
	}
	if err := fileTmpl.Execute(out, map[string]string{
		"Package": pkg,
		"Imports": imports.String(),
	}); err != nil {
		return err
	}
	for _, v := range values {
		if err := attrTmpl.Execute(out, v); err != nil {
			return err
		}
	}
	return nil
}

var file = `// This file is generated by digen. DO NOT EDIT.
package {{.Package}}

import (
{{.Imports}})
`
var attr = `
func (d *D) Get{{.Field}}() {{.Type}} {
  return d.Get("{{.Field}}").({{.Type}})
}

func (b *B) Set{{.Field}}(v {{.Type}}) {
  b.Set("{{.Field}}", v)
}
`

func Generate(manifestPath string, outDir string, body string) error {
	src, err := ioutil.ReadFile(manifestPath)
	if err != nil {
		return err
	}
	manifest, err := ParseManifest(src)
	if err != nil {
		return err
	}
	if err := generateMain(outDir, body); err != nil {
		return err
	}
	if !manifest.IsEmpty() {
		if err := generateExt(outDir, manifest); err != nil {
			return err
		}
	}
	return nil
}
