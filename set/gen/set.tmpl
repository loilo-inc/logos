package set

import "sync"

type {{.Iface}} interface {
	Add(v {{.Type}})
	Delete(v {{.Type}})
	Values() []{{.Type}}
	ForEach(f func(v {{.Type}}) (ok bool))
	Size() int
	Has(v {{.Type}}) bool
}

type {{.Struct}} struct {
	m   sync.Map
}

func (i *{{.Struct}}) Has(v {{.Type}}) bool {
	_, ok := i.m.Load(v)
	return ok
}

func (i *{{.Struct}}) Size() int {
	cnt := 0
	i.m.Range(func(key, value interface{}) bool {
		cnt += 1
		return true
	})
	return cnt
}

func (i *{{.Struct}}) Add(v {{.Type}}) {
	i.m.Store(v, struct{}{})
}

func (i *{{.Struct}}) Delete(v {{.Type}}) {
	i.m.Delete(v)
}

func (i *{{.Struct}}) ForEach(f func(i {{.Type}}) bool) {
	i.m.Range(func(key, value interface{}) bool {
		return f(key.({{.Type}}))
	})
}

func (i *{{.Struct}}) Values() []{{.Type}} {
	var ret []{{.Type}}
	i.m.Range(func(key, value interface{}) bool {
		v := key.({{.Type}})
		ret = append(ret, v)
		return true
	})
	return ret
}

func New{{.Iface}}() {{.Iface}} {
	return &{{.Struct}}{}
}
